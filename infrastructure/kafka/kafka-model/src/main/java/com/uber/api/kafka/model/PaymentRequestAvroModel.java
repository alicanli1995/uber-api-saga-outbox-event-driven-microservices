/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uber.api.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentRequestAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9172312250950347719L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentRequestAvroModel\",\"namespace\":\"com.uber.api.kafka.model\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"sagaId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerMail\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"paymentCustomerStatus\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentCustomerStatus\",\"symbols\":[\"PENDING\",\"CANCELED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<PaymentRequestAvroModel> ENCODER =
      new BinaryMessageEncoder<PaymentRequestAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentRequestAvroModel> DECODER =
      new BinaryMessageDecoder<PaymentRequestAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentRequestAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentRequestAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentRequestAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentRequestAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentRequestAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentRequestAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentRequestAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentRequestAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String requestId;
  private java.lang.String sagaId;
  private java.lang.String customerMail;
  private java.math.BigDecimal price;
  private java.time.Instant createdAt;
  private com.uber.api.kafka.model.PaymentCustomerStatus paymentCustomerStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentRequestAvroModel() {}

  /**
   * All-args constructor.
   * @param requestId The new value for requestId
   * @param sagaId The new value for sagaId
   * @param customerMail The new value for customerMail
   * @param price The new value for price
   * @param createdAt The new value for createdAt
   * @param paymentCustomerStatus The new value for paymentCustomerStatus
   */
  public PaymentRequestAvroModel(java.lang.String requestId, java.lang.String sagaId, java.lang.String customerMail, java.math.BigDecimal price, java.time.Instant createdAt, com.uber.api.kafka.model.PaymentCustomerStatus paymentCustomerStatus) {
    this.requestId = requestId;
    this.sagaId = sagaId;
    this.customerMail = customerMail;
    this.price = price;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.paymentCustomerStatus = paymentCustomerStatus;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return sagaId;
    case 2: return customerMail;
    case 3: return price;
    case 4: return createdAt;
    case 5: return paymentCustomerStatus;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: sagaId = value$ != null ? value$.toString() : null; break;
    case 2: customerMail = value$ != null ? value$.toString() : null; break;
    case 3: price = (java.math.BigDecimal)value$; break;
    case 4: createdAt = (java.time.Instant)value$; break;
    case 5: paymentCustomerStatus = (com.uber.api.kafka.model.PaymentCustomerStatus)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return The value of the 'requestId' field.
   */
  public java.lang.String getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * @param value the value to set.
   */
  public void setRequestId(java.lang.String value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public java.lang.String getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(java.lang.String value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'customerMail' field.
   * @return The value of the 'customerMail' field.
   */
  public java.lang.String getCustomerMail() {
    return customerMail;
  }


  /**
   * Sets the value of the 'customerMail' field.
   * @param value the value to set.
   */
  public void setCustomerMail(java.lang.String value) {
    this.customerMail = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.math.BigDecimal getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.math.BigDecimal value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'paymentCustomerStatus' field.
   * @return The value of the 'paymentCustomerStatus' field.
   */
  public com.uber.api.kafka.model.PaymentCustomerStatus getPaymentCustomerStatus() {
    return paymentCustomerStatus;
  }


  /**
   * Sets the value of the 'paymentCustomerStatus' field.
   * @param value the value to set.
   */
  public void setPaymentCustomerStatus(com.uber.api.kafka.model.PaymentCustomerStatus value) {
    this.paymentCustomerStatus = value;
  }

  /**
   * Creates a new PaymentRequestAvroModel RecordBuilder.
   * @return A new PaymentRequestAvroModel RecordBuilder
   */
  public static com.uber.api.kafka.model.PaymentRequestAvroModel.Builder newBuilder() {
    return new com.uber.api.kafka.model.PaymentRequestAvroModel.Builder();
  }

  /**
   * Creates a new PaymentRequestAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentRequestAvroModel RecordBuilder
   */
  public static com.uber.api.kafka.model.PaymentRequestAvroModel.Builder newBuilder(com.uber.api.kafka.model.PaymentRequestAvroModel.Builder other) {
    if (other == null) {
      return new com.uber.api.kafka.model.PaymentRequestAvroModel.Builder();
    } else {
      return new com.uber.api.kafka.model.PaymentRequestAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new PaymentRequestAvroModel RecordBuilder by copying an existing PaymentRequestAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new PaymentRequestAvroModel RecordBuilder
   */
  public static com.uber.api.kafka.model.PaymentRequestAvroModel.Builder newBuilder(com.uber.api.kafka.model.PaymentRequestAvroModel other) {
    if (other == null) {
      return new com.uber.api.kafka.model.PaymentRequestAvroModel.Builder();
    } else {
      return new com.uber.api.kafka.model.PaymentRequestAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentRequestAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentRequestAvroModel>
    implements org.apache.avro.data.RecordBuilder<PaymentRequestAvroModel> {

    private java.lang.String requestId;
    private java.lang.String sagaId;
    private java.lang.String customerMail;
    private java.math.BigDecimal price;
    private java.time.Instant createdAt;
    private com.uber.api.kafka.model.PaymentCustomerStatus paymentCustomerStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uber.api.kafka.model.PaymentRequestAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.customerMail)) {
        this.customerMail = data().deepCopy(fields()[2].schema(), other.customerMail);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[4].schema(), other.createdAt);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.paymentCustomerStatus)) {
        this.paymentCustomerStatus = data().deepCopy(fields()[5].schema(), other.paymentCustomerStatus);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentRequestAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uber.api.kafka.model.PaymentRequestAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerMail)) {
        this.customerMail = data().deepCopy(fields()[2].schema(), other.customerMail);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[4].schema(), other.createdAt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentCustomerStatus)) {
        this.paymentCustomerStatus = data().deepCopy(fields()[5].schema(), other.paymentCustomerStatus);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public java.lang.String getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder setSagaId(java.lang.String value) {
      validate(fields()[1], value);
      this.sagaId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerMail' field.
      * @return The value.
      */
    public java.lang.String getCustomerMail() {
      return customerMail;
    }


    /**
      * Sets the value of the 'customerMail' field.
      * @param value The value of 'customerMail'.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder setCustomerMail(java.lang.String value) {
      validate(fields()[2], value);
      this.customerMail = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerMail' field has been set.
      * @return True if the 'customerMail' field has been set, false otherwise.
      */
    public boolean hasCustomerMail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerMail' field.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder clearCustomerMail() {
      customerMail = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.math.BigDecimal getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder setPrice(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder clearPrice() {
      price = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[4], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder clearCreatedAt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentCustomerStatus' field.
      * @return The value.
      */
    public com.uber.api.kafka.model.PaymentCustomerStatus getPaymentCustomerStatus() {
      return paymentCustomerStatus;
    }


    /**
      * Sets the value of the 'paymentCustomerStatus' field.
      * @param value The value of 'paymentCustomerStatus'.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder setPaymentCustomerStatus(com.uber.api.kafka.model.PaymentCustomerStatus value) {
      validate(fields()[5], value);
      this.paymentCustomerStatus = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentCustomerStatus' field has been set.
      * @return True if the 'paymentCustomerStatus' field has been set, false otherwise.
      */
    public boolean hasPaymentCustomerStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paymentCustomerStatus' field.
      * @return This builder.
      */
    public com.uber.api.kafka.model.PaymentRequestAvroModel.Builder clearPaymentCustomerStatus() {
      paymentCustomerStatus = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentRequestAvroModel build() {
      try {
        PaymentRequestAvroModel record = new PaymentRequestAvroModel();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.sagaId = fieldSetFlags()[1] ? this.sagaId : (java.lang.String) defaultValue(fields()[1]);
        record.customerMail = fieldSetFlags()[2] ? this.customerMail : (java.lang.String) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.createdAt = fieldSetFlags()[4] ? this.createdAt : (java.time.Instant) defaultValue(fields()[4]);
        record.paymentCustomerStatus = fieldSetFlags()[5] ? this.paymentCustomerStatus : (com.uber.api.kafka.model.PaymentCustomerStatus) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentRequestAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentRequestAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentRequestAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<PaymentRequestAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










